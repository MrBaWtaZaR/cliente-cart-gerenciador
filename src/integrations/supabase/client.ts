
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cgtdckfqodmlyjqolbxw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNndGRja2Zxb2RtbHlqcW9sYnh3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1MzY1NzMsImV4cCI6MjA2MjExMjU3M30._mUuzy_5KGXDp7teC_OJrHNp3TwbvN7tVqbLEysZvnM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    storage: localStorage,
    detectSessionInUrl: true,
    flowType: 'implicit'
  }
});

// Helper function to create storage URLs
export const getStorageUrl = (bucket: string, path: string) => {
  return `${SUPABASE_URL}/storage/v1/object/public/${bucket}/${path}`;
};

// Helper function to check bucket existence without triggering RLS errors
export const checkBucketExists = async (bucketName: string) => {
  try {
    const { data, error } = await supabase.storage.getBucket(bucketName);
    if (error) {
      console.log(`Bucket ${bucketName} doesn't exist:`, error.message);
      return false;
    }
    return true;
  } catch (err) {
    console.error(`Error checking bucket ${bucketName}:`, err);
    return false;
  }
};
